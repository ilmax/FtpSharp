name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
      - name: Echo version
        run: echo "SemVer=${{ steps.gitversion.outputs.semVer }}"
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore FtpServer.sln
      - name: Build
        run: dotnet build FtpServer.sln --configuration Release --no-restore
      - name: Test with coverage
        run: dotnet test FtpServer.sln --configuration Release --no-build --collect:"XPlat Code Coverage"
      - name: Report coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
        with:
          reports: 'FtpServer.Tests/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coverage-report'
          reporttypes: 'MarkdownSummaryGithub;Cobertura;TextSummary'
      - name: Publish coverage in build summary
        run: cat coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
        shell: bash
      - name: Enforce coverage >= 80%
        run: |
          PCT=$(grep -o 'Line coverage: [0-9]*\.[0-9]*' coverage-report/Summary.txt | awk '{print $3}')
          echo "Coverage=$PCT%"
          awk -v p="$PCT" 'BEGIN { if (p+0 < 80) exit 1 }'

  docker:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - name: Compute lowercase image repository
        shell: bash
        run: echo "IMAGE_REPO_LC=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_REPO_LC }}:${{ needs.build-test.outputs.semver }}
            ${{ env.IMAGE_REPO_LC }}:latest

  curl-integration:
    runs-on: ubuntu-latest
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        storage: [FileSystem, InMemory]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Restore
        run: dotnet restore FtpServer.sln
      - name: Build
        run: dotnet build FtpServer.App/FtpServer.App.csproj --configuration Release --no-restore
      - name: Run curl-based integration tests
        env:
          PORT: 2121
          PASV_START: 49152
          PASV_END: 49162
          FTP_FTPSERVER__STORAGEPROVIDER: ${{ matrix.storage }}
          DOTNET_CONFIGURATION: Release
        run: |
          chmod +x scripts/curl_integration_tests.sh
          scripts/curl_integration_tests.sh
