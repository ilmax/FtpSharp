name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      semver: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
      - name: Echo version
        run: echo "SemVer=${{ steps.gitversion.outputs.semVer }}"
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore FtpServer.sln
      - name: Build
        run: dotnet build FtpServer.sln --configuration Release --no-restore
      - name: Test with coverage
        run: dotnet test FtpServer.sln --configuration Release --no-build --collect:"XPlat Code Coverage"
      - name: Report coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
        with:
          reports: 'FtpServer.Tests/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coverage-report'
          reporttypes: 'MarkdownSummaryGithub;Cobertura;TextSummary'
      - name: Publish coverage in build summary
        run: cat coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
        shell: bash
      - name: Enforce coverage >= 80%
        run: |
          PCT=$(grep -o 'Line coverage: [0-9]*\.[0-9]*' coverage-report/Summary.txt | awk '{print $3}')
          echo "Coverage=$PCT%"
          awk -v p="$PCT" 'BEGIN { if (p+0 < 80) exit 1 }'

  docker:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Compute lowercase image repository
        shell: bash
        run: echo "IMAGE_REPO_LC=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"
      - name: Build and (conditionally) push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_REPO_LC }}:${{ needs.build-test.outputs.semver }}
            ${{ env.IMAGE_REPO_LC }}:latest

  docker-integration:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        storage: [FileSystem, InMemory]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image (load to local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ftpserver:test
      - name: Run container
        env:
          STORAGE: ${{ matrix.storage }}
        run: |
          docker rm -f ftpserver-test 2>/dev/null || true
          mkdir -p .dockerdata
          docker run -d --name ftpserver-test \
            -e FTP_FtpServer__Port=21 \
            -e FTP_FtpServer__ListenAddress=0.0.0.0 \
            -e FTP_FtpServer__PassivePublicIp=127.0.0.1 \
            -e FTP_FtpServer__PassivePortRangeStart=49152 \
            -e FTP_FtpServer__PassivePortRangeEnd=49162 \
            -e FTP_FtpServer__Authenticator=Basic \
            -e FTP_FtpServer__Users__test=testpass \
            -e FTP_FtpServer__StorageProvider=$STORAGE \
            -e FTP_FtpServer__StorageRoot=/data \
            -e ASPNETCORE_URLS=http://0.0.0.0:8080 \
            -v "$PWD/.dockerdata:/data" \
            -p 2121:21 -p 49152-49162:49152-49162 -p 8080:8080 \
            ftpserver:test
      - name: Wait for FTP to be ready
        run: |
          set -e
          READY=0
          for i in {1..60}; do
            if timeout 2 bash -lc 'exec 3<>/dev/tcp/127.0.0.1/2121; read -t 2 banner <&3; echo "$banner" | grep -q "^220"'; then
              echo "FTP banner received (220)."
              READY=1
              break
            fi
            sleep 1
          done
          if [ "$READY" -ne 1 ]; then
            echo "FTP server did not become ready in time." >&2
            docker logs ftpserver-test || true
            exit 1
          fi
      - name: Run comprehensive curl integration tests against container
        env:
          PORT: 2121
          PASV_START: 49152
          PASV_END: 49162
          EXTERNAL_SERVER: "true"
          AUTH_USER: test
          AUTH_PASS: testpass
          DOTNET_CONFIGURATION: Release
          SKIP_ACTIVE: "true"
          SKIP_PYTHON: "true"
        run: |
          chmod +x scripts/curl_integration_tests.sh
          scripts/curl_integration_tests.sh
      - name: Dump logs on failure
        if: failure()
        run: |
          docker logs ftpserver-test || true
      - name: Cleanup container
        if: always()
        run: |
          docker rm -f ftpserver-test || true

  curl-integration:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        storage: [FileSystem, InMemory]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Restore .NET packages
        run: dotnet restore FtpServer.sln
      - name: Build app (Release)
        run: dotnet build FtpServer.App/FtpServer.App.csproj --configuration Release --no-restore
      - name: Run curl-based integration tests script
        env:
          PORT: 2121
          PASV_START: 49152
          PASV_END: 49162
          FTP_FTPSERVER__STORAGEPROVIDER: ${{ matrix.storage }}
          DOTNET_CONFIGURATION: Release
        run: |
          chmod +x scripts/curl_integration_tests.sh
          scripts/curl_integration_tests.sh
